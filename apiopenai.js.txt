// api/openai.js
export default async function handler(req, res) {
  // Get the API key from Vercel environment variables
  const openaiAPIKey = process.env.OPENAI_API_KEY;  // Ensure this matches the environment variable name in Vercel

  if (req.method === 'POST') {
    const { prompt, imageUrl } = req.body; // Get the prompt and imageUrl from the frontend if you are using image-based prompts.

    try {
      // Call OpenAI's API (you should use the appropriate endpoint for your AI model)
      const response = await fetch('https://api.openai.com/v1/chat/completions', {  // Updated to the chat completion API endpoint
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openaiAPIKey}`,  // Send the API key from the environment variable
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: "gpt-4-turbo",  // Match with the frontend (could be gpt-3.5-turbo or gpt-4)
          messages: [
            { role: "system", content: "You are a helpful assistant." },
            { role: "user", content: prompt },  // Handle the prompt received from the frontend
          ],
          max_tokens: 100,
        }),
      });

      // Get the response from OpenAI
      const data = await response.json();

      // Send the result back to the frontend
      if (data.choices && data.choices.length > 0) {
        res.status(200).json(data.choices[0].message.content);  // Send the AI response content
      } else {
        res.status(500).json({ error: 'No valid response from OpenAI API' });
      }
    } catch (error) {
      // If something goes wrong, send an error message
      res.status(500).json({ error: 'Something went wrong with OpenAI API' });
    }
  } else {
    // If the method is not POST, return Method Not Allowed
    res.status(405).json({ error: 'Method Not Allowed' });
  }
}

